@page "/products"
@using DiamondShop.WebApp.Components.Pages.Products
@using DiamondShop.WebApp.Components.Products
@rendermode InteractiveServer
@inject IHttpClientFactory _httpClientFactory
@using System.Globalization


<PageTitle>MAPTH - Sản phẩm</PageTitle>

<div class="" style="max-width: 40%;margin: 0 auto;">
    <h1 class="text-center fw-bold">Bộ lọc</h1>
    <div class="input-group mb-3">
        <MudTextField @bind-Value="@queryProduct.Material" Immediate="false" DebounceInterval="500"
            OnDebounceIntervalElapsed="RefreshPageData" Label="Chất liệu" Variant="Variant.Outlined"
            Margin="Margin.Dense"></MudTextField>
    </div>
    <div class="input-group mb-3" style="display: flex;gap: 2rem;">
        <MudNumericField @bind-Value="queryProduct.StartPrice" HideSpinButtons="true" 
            Min="0" DebounceInterval="500" Culture="_vi"
            Variant="Variant.Text" 
            OnDebounceIntervalElapsed="RefreshPageData" Format="N0" Immediate="false" class="form-control"
            Label="Giá khởi điểm" />
        <MudNumericField @bind-Value="queryProduct.EndPrice" Min="0" Immediate="false" Culture="_vi"
            DebounceInterval="500" Format="N0" OnDebounceIntervalElapsed="RefreshPageData" class="form-control"
            HideSpinButtons="true"
            Label="Giá kết thúc" />
    </div>

    <MudSelect Margin="Margin.Dense" Value="pageSize" ValueChanged="(int value) => HandlePageSizeChanged(value)" T="int"
        Label="Hiển thị tối đa" AnchorOrigin="Origin.BottomCenter">
        <MudSelectItem T="int" Value="5" />
        <MudSelectItem T="int" Value="10" />
        <MudSelectItem T="int" Value="15" />
    </MudSelect>

    @* <MudNumericField @bind-Value="pageSize" Min="1" Max="10" DebounceInterval="500" Placeholder="Hiển thị tối đa"
    Immediate="false" OnDebounceIntervalElapsed="RefreshPageData" /> *@
</div>

@if (pagedResult is null || pagedResult.Results is null)
{
    <p class="text-center">Loading...</p>
}
else if (pagedResult.Results is []) 
{
    <h3 class="text-center">Không tìm thấy sản phẩm nào</h3>
}
else
{
    <div class="product_cards" style="margin-top: 10rem;">
        @foreach (var product in pagedResult.Results)
        {
            <ProductCard Product="product" />
        }
    </div>

    <MudPagination class="center_inline" Selected="currentPage" style="margin-top: 5rem" Color="Color.Primary"
        Count="pagedResult.TotalPages" SelectedChanged="HandlePageChanged" />
}


@code {
    private PagedResult<GetProductInPagedResultDto>? pagedResult;

    private QueryProductDto queryProduct = null!;

    private CultureInfo _vi = CultureInfo.GetCultureInfo("vi-VN");

    private int currentPage = 1;

    private int pageSize = 10;

    private async Task RefreshProductsData()
    {
        try
        {
            await Task.Delay(500);

            string url =
            $@"http://localhost:5217/api/products?QueryDto.PageNumber={currentPage}&QueryDto.PageSize={pageSize}&startPrice={queryProduct.StartPrice}&endPrice={queryProduct.EndPrice}&material={queryProduct.Material}";
            var client = _httpClientFactory.CreateClient();
            var pagedResultResponse = await client.GetFromJsonAsync<PagedResult<GetProductInPagedResultDto>>(url);
            pagedResult = pagedResultResponse;


        }
        catch (Exception ex)
        {
            // Handle the exception
            Console.WriteLine($"An error occurred when rendering products: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        pagedResult ??= new PagedResult<GetProductInPagedResultDto>();
        queryProduct ??= new QueryProductDto();
        await RefreshProductsData();
    }

    private async Task RefreshPageData()
    {
        Console.WriteLine("Call refresh page data");
        currentPage = 1;
        await RefreshProductsData();
    }


    private async Task HandlePageChanged(int newPage)
    {
        currentPage = newPage;
        await RefreshProductsData();
    }

    private async Task HandlePageSizeChanged(int newPageSize)
    {
        Console.WriteLine("Call handle page size changed");
        pageSize = newPageSize;
        await RefreshProductsData();
    }
}